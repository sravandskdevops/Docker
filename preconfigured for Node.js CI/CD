Perfect ⚡ — you want Jenkins preconfigured for Node.js CI/CD (so you can automatically build & test Node apps).

Here’s the complete setup 👇
✅ Jenkins + Docker + Maven + Node.js
✅ Node.js CI/CD ready (with npm & pipeline support)
✅ Preinstalled Jenkins plugins for Node builds
Dockerfile: Jenkins with Node.js CI/CD Setup
vi Dockerfile 
# ---------------------------
# Base: Ubuntu + Java + Jenkins
# ---------------------------
FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive

# Install base tools
RUN apt-get update && \
    apt-get install -y openjdk-17-jdk wget curl git gnupg sudo ca-certificates lsb-release unzip && \
    rm -rf /var/lib/apt/lists/*

# ---------------------------
# Install Jenkins
# ---------------------------
RUN wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | apt-key add - && \
    sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list' && \
    apt-get update && \
    apt-get install -y jenkins && \
    rm -rf /var/lib/apt/lists/*

# ---------------------------
# Install Docker CLI
# ---------------------------
RUN apt-get update && \
    apt-get install -y docker.io && \
    usermod -aG docker jenkins && \
    rm -rf /var/lib/apt/lists/*

# ---------------------------
# Install Node.js (LTS) + npm + yarn
# ---------------------------
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g yarn && \
    rm -rf /var/lib/apt/lists/*

# ---------------------------
# Install Jenkins Plugins (Node + Pipeline + Git + Docker)
# ---------------------------
RUN jenkins-plugin-cli --plugins \
    "git:latest \
     workflow-aggregator:latest \
     docker-workflow:latest \
     blueocean:latest \
     credentials-binding:latest \
     nodejs:latest"

# ---------------------------
# Setup Jenkins Node.js Tool Configuration
# ---------------------------
# Preconfigure Jenkins to use global Node.js installation
COPY jenkins.yaml /usr/share/jenkins/ref/jenkins.yaml

ENV CASC_JENKINS_CONFIG=/usr/share/jenkins/ref/jenkins.yaml

# ---------------------------
# Expose Ports
# ---------------------------
EXPOSE 8080 50000

# Start Jenkins
CMD ["java", "-jar", "/usr/share/jenkins/jenkins.war"]
---------------------------------------------------------------------------------------------------------
### jenkins.yaml (auto-configures Node.js tool inside Jenkins)
=====================================================================
vi jenkins.yaml
jenkins:
  systemMessage: "Jenkins Node.js CI/CD Server"
  tool:
    nodejs:
      installations:
        - name: "NodeJS_18"
          home: "/usr/bin"
-------------------------------------------------------------------------------------------------------
# Build Jenkins with Node.js
docker build -t myjenkins:nodejs .

# Run container
docker run -d \
  -p 8080:8080 -p 50000:50000 \
  --name jenkins-node \
  -v jenkins_home:/var/lib/jenkins \
  -v /var/run/docker.sock:/var/run/docker.sock \
  myjenkins:nodejs
--------------------------------------------------------------------------------------------------------------
docker exec -it jenkins-node cat /var/lib/jenkins/secrets/initialAdminPassword
=============================================================================================================== end 
Perfect ⚡ — here’s a complete Jenkins Pipeline (Jenkinsfile) for a Node.js project, ready to use in your Jenkins setup.
This pipeline will:
✅ Pull code from GitHub
✅ Install dependencies with npm
✅ Run tests
✅ Build your app
✅ (Optional) Build and push a Docker image
vi Jenkinsfile
pipeline {
    agent any

    tools {
        nodejs "NodeJS_18"   // Matches the NodeJS tool name in jenkins.yaml
    }

    environment {
        DOCKER_IMAGE = "kumar1111/nodejs-app"
        DOCKERHUB_USER = "kumar1111"
    }

    stages {

        stage('Checkout Code') {
            steps {
                echo '📥 Cloning repository...'
                git branch: 'main', url: 'https://github.com/your-username/your-nodejs-app.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                echo '📦 Installing npm packages...'
                sh 'npm install'
            }
        }

        stage('Run Tests') {
            steps {
                echo '🧪 Running test cases...'
                sh 'npm test || echo "No tests defined"'
            }
        }

        stage('Build Application') {
            steps {
                echo '🏗️ Building the Node.js application...'
                sh 'npm run build || echo "No build script defined"'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo '🐳 Building Docker image...'
                sh 'docker build -t ${DOCKER_IMAGE}:latest .'
            }
        }

        stage('Push to Docker Hub') {
            steps {
                echo '🚀 Pushing Docker image to Docker Hub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    sh 'echo $PASS | docker login -u $USER --password-stdin'
                    sh 'docker push ${DOCKER_IMAGE}:latest'
                }
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed. Please check logs.'
        }
    }
}
=======================================================================================================================
⚙️ Setup Instructions

In Jenkins:

Go to Manage Jenkins → Tools → NodeJS Installations

Ensure there’s a tool named “NodeJS_18” (it matches the pipeline above)

In Jenkins:

Go to Credentials → Global → Add Credentials

Type: Username with password

ID: dockerhub-cred

Username: your Docker Hub username

Password: your Docker Hub password or token

In your GitHub repo, place this file at:
/Jenkinsfile
Create a new pipeline job in Jenkins:

Type: Pipeline

Choose: Pipeline script from SCM → Git

Repo URL: your Node.js project repo

Branch: main
==================================================
nodejs-app/
│
├── Dockerfile
├── Jenkinsfile          ← (from previous step)
├── package.json
├── server.js
└── README.md
==================================================
vi server.js
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('🚀 Hello from Node.js App — Deployed via Jenkins CI/CD!');
});

app.listen(PORT, () => {
  console.log(`✅ Server running on port ${PORT}`);
});
====================================================================
vi package.json
{
  "name": "nodejs-jenkins-demo",
  "version": "1.0.0",
  "description": "Simple Node.js app for Jenkins CI/CD demo",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "test": "echo \"No tests defined\" && exit 0"
  },
  "dependencies": {
    "express": "^4.18.2"
  }
}
=====================================================================
vi Dockerfile



